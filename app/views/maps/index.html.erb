
<div class="fetchMarkerButtons">
	<button id="fetchNil" class="mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent">None</button>
	<button id="fetchAll" class="mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent">All</button>
	<button id="fetchHousing" class="mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent">Housing</button>
	<button id="fetchStudy" class="mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent">Study</button>
	<button id="fetchTravel" class="mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent">Travel</button>
	<button id="trigger" class="mdl-button mdl-js-button mdl-button--fab mdl-js-ripple-effect mdl-button--colored">
	  <i class="material-icons">add</i>
	</button>

	<ul id="marker-ul">
		
	</ul>
</div>




	<div id="modalAddtoMap">
		<div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label textfield-demo">
			<input class="mdl-textfield__input" type="text" id="form_marker_type"/>
			<label class="mdl-textfield__label" for="sample3">Type of Marker</label>
		</div><br />

		<div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label textfield-demo">
			<input class="mdl-textfield__input" type="text" id="form_title"/>
			<label class="mdl-textfield__label" for="sample3">Title</label>
		</div><br />

		<div class="mdl-textfield mdl-js-textfield textfield-demo">
			<textarea class="mdl-textfield__input" type="text" rows= "3" id="form_body" ></textarea>
			<label class="mdl-textfield__label" for="sample5">Content for your marker</label>
		</div>

		<div class="mdl-textfield mdl-js-textfield textfield-demo">
			<textarea class="mdl-textfield__input" type="text" rows= "3" id="form_address" ></textarea>
			<label class="mdl-textfield__label" for="sample5">Address</label>
		</div>

		<div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label textfield-demo">
			<input class="mdl-textfield__input" type="text" id="form_expiry_date datepicker"/>
			<label class="mdl-textfield__label" for="sample3">Expiry Date</label>
		</div>

		<button id="submitMarkerData" class="mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect mdl-button--accent">Add to Map</button>
	</div>




<div id="map-canvas">
	
</div>


<script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAPP7GbQmDJN-0dQAk3FPVhynSF3-oeByM"></script>

<script type="text/javascript">
// MARKER MANAGEMENT
(function(window) {
	var List = (function(){
		function List(){
			this.items = [];
		}

		List.prototype = {

			add: function(item){
				this.items.push(item);
			},
			remove: function(item){
				var indexOf = this.items.indexOf(item);
				if(indexOf !== -1){
					this.items.splice(indexOf, 1);
				}
			},
			find: function(callback, action){
				var callbackReturn,
					items = this.items,
					length = items.length,
					matches = [],
					i = 0;
				for(; i<length; i++){
					callbackReturn = callback(items[i], i);
					if(callbackReturn){
						matches.push(items[i]);
					}
				}

				if(action){
					action.call(this, matches);
				}

				return matches;
			}
		};

		return List;
	})();


	List.create = function(params){
		return new List(params);
	};

	window.List = List;
})(window);








// Mapper Library
(function(window, google, List){
// This is like a class in OOP
	var Mapper = (function(){
	// And this is like the init function
		function Mapper(element, opts){
			this.gMap = new google.maps.Map(element, opts);
			this.markers = List.create();
		}

		Mapper.prototype = {
			// FOR SETTING AND GETTING ZOOM LEVELS
			zoom: function(level){
				if(level){
					this.gMap.setZoom(level);
				} else {
					return this.gMap.getZoom();
				}
			},


			// FOR EVENT HANDLING
			_on: function(opts){
				var self = this;
				google.maps.event.addListener(opts.obj, opts.event, function(e){
					opts.callback.call(self, e);
					// If we simply pass callback instead of that function, we'll get the map object while calling this
					// But doing this we will get the Mapster library when we call this
				});
			},



			// ADDING MARKERS TO THE MAP
			addMarker: function(opts){
				var marker;
				opts.position = {
					lat: opts.lat,
					lng: opts.lng
				};

				marker = this._createMarker(opts);
				this.markers.add(marker);

				// Checking to see if there is an event attached to the object literal passed
				if(opts.event){
					this._on({
						obj: marker,
						event: opts.event.name,
						callback: opts.event.callback
					});
				}

				// Checking to see if there is any content passed to the object literal so it can open an infoWindow with
				// that content
				if(opts.content){
					this._on({
						obj: marker,
						event: 'click',
						callback: function(){
							var infoWindow = new google.maps.InfoWindow({
								content: opts.content
							});

							infoWindow.open(this.gMap, marker);
						}
					})
				}
				return marker;

			},
			findBy: function(callback){
				return this.markers.find(callback);
			},

			removeBy: function(callback){
				this.markers.find(callback, function(markers){
					markers.forEach(function(marker){
						marker.setMap(null); 
					});
				});
			},

			_createMarker: function(opts){
				opts.map = this.gMap;
				return new google.maps.Marker(opts);
			}
		};

		return Mapper;
		// This return the whole object
	}());

	Mapper.create = function(element, opts){
		return new Mapper(element, opts);
	};

	window.Mapper = Mapper;

}(window, google, List));






// MAP OPTIONS
(function(window, mapper) {
	mapper.MAP_OPTIONS = {
		center: {
			lat: 12.9656536,
			lng: 77.6067617
		},
		zoom: 12,
		disableDefaultUI: false
	}
})(window, window.Mapper || (window.Mapper = {}));




// SCRIPT TO LOAD MAP INTO THE PAGE
(function(window, mapper){
	// MAP OPTIONS
	var options = Mapper.MAP_OPTIONS,
	
	element = document.getElementById('map-canvas'),
	map = mapper.create(element, options);
	
	marker = map.addMarker({
		lat: 12.9656536,
		lng: 77.6067617,
		draggable: true,
		icon: "http://google-maps-icons.googlecode.com/files/vegetarian.png",
		event: {
			name: 'dragend',
			callback: function(){
				alert("I'm dragged!");
			}
		},
		content: "Hello there, I'm the infowindow content"

	});

	marker2 = map.addMarker({
		lat: 12.964532,
		lng: 77.615321,
		draggable: true,
		icon: "http://google-maps-icons.googlecode.com/files/vegetarian.png",
		event: {
			name: 'dragend',
			callback: function(){
				alert("I'm dragged!");
			}
		},
		marker_type: 'Study',
		content: "Hello there, I'm the infowindow content"

	});
	// marker1 = new google.maps.Marker({
	// 	position: {
	// 		lat: 12.9656536,
	// 		lng: 77.6067617
	// 	},
	// 	map: map.gMap
	// });

	
	
	window.map = map;
	console.log(map.markers);

	
}(window, window.Mapper || (window.Mapper = {})));




</script>





<script type="text/javascript">

// FOR THE JQUERY DATEPICKER



	// MODAL CODE
	// Create an immediately invoked functional expression to wrap our code
(function() {

  // Define our constructor 
  this.Modal = function() {

    // Create global element references
    this.closeButton = null;
    this.modal = null;
    this.overlay = null;

    // Determine proper prefix
    this.transitionEnd = transitionSelect();

    // Define option defaults 
    var defaults = {
      autoOpen: false,
      className: 'fade-and-drop',
      closeButton: true,
      content: "",
      maxWidth: 600,
      minWidth: 280,
      overlay: true
    }

    // Create options by extending defaults with the passed in arugments
    if (arguments[0] && typeof arguments[0] === "object") {
      this.options = extendDefaults(defaults, arguments[0]);
    }

    if(this.options.autoOpen === true) this.open();

  }

  // Public Methods

  Modal.prototype.close = function() {
    var _ = this;
    this.modal.className = this.modal.className.replace(" scotch-open", "");
    this.overlay.className = this.overlay.className.replace(" scotch-open",
      "");
    this.modal.addEventListener(this.transitionEnd, function() {
      _.modal.parentNode.removeChild(_.modal);
    });
    this.overlay.addEventListener(this.transitionEnd, function() {
      if(_.overlay.parentNode) _.overlay.parentNode.removeChild(_.overlay);
    });
  }

  Modal.prototype.open = function() {
    buildOut.call(this);
    initializeEvents.call(this);
    window.getComputedStyle(this.modal).height;
    this.modal.className = this.modal.className +
      (this.modal.offsetHeight > window.innerHeight ?
        " scotch-open scotch-anchored" : " scotch-open");
    this.overlay.className = this.overlay.className + " scotch-open";
  }

  // Private Methods

  function buildOut() {

    var content, contentHolder, docFrag;

    /*
     * If content is an HTML string, append the HTML string.
     * If content is a domNode, append its content.
     */

    if (typeof this.options.content === "string") {
      content = this.options.content;
    } else {
      content = this.options.content.innerHTML;
    }

    // Create a DocumentFragment to build with
    docFrag = document.createDocumentFragment();

    // Create modal element
    this.modal = document.createElement("div");
    this.modal.className = "scotch-modal " + this.options.className;
    this.modal.style.minWidth = this.options.minWidth + "px";
    this.modal.style.maxWidth = this.options.maxWidth + "px";

    // If closeButton option is true, add a close button
    if (this.options.closeButton === true) {
      this.closeButton = document.createElement("button");
      this.closeButton.className = "scotch-close close-button";
      this.closeButton.innerHTML = "&times;";
      this.modal.appendChild(this.closeButton);
    }

    // If overlay is true, add one
    if (this.options.overlay === true) {
      this.overlay = document.createElement("div");
      this.overlay.className = "scotch-overlay " + this.options.className;
      docFrag.appendChild(this.overlay);
    }

    // Create content area and append to modal
    contentHolder = document.createElement("div");
    contentHolder.className = "scotch-content";
    contentHolder.innerHTML = content;
    this.modal.appendChild(contentHolder);

    // Append modal to DocumentFragment
    docFrag.appendChild(this.modal);

    // Append DocumentFragment to body
    document.body.appendChild(docFrag);

  }

  function extendDefaults(source, properties) {
    var property;
    for (property in properties) {
      if (properties.hasOwnProperty(property)) {
        source[property] = properties[property];
      }
    }
    return source;
  }

  function initializeEvents() {

    if (this.closeButton) {
      this.closeButton.addEventListener('click', this.close.bind(this));
    }

    if (this.overlay) {
      this.overlay.addEventListener('click', this.close.bind(this));
    }

  }

  function transitionSelect() {
    var el = document.createElement("div");
    if (el.style.WebkitTransition) return "webkitTransitionEnd";
    if (el.style.OTransition) return "oTransitionEnd";
    return 'transitionend';
  }

}());

var myContent = document.getElementById('modalAddtoMap');

var myModal = new Modal({
  content: myContent
});

var triggerButton = document.getElementById('trigger');

triggerButton.addEventListener('click', function() {
  myModal.open();
});
















// SCRIPT TO LOAD MARKERS FROM DATABASE
	$(document).ready(function(){
		$("#fetchNil, #fetchAll, #fetchHousing, #fetchStudy, #fetchTravel").on("click", function(event){
			event.preventDefault();
			var btnContent = $(this).context.textContent;
			fetch(btnContent);

		});
	});



	// ADDING MARKERS TO MAP
	var fetch = function(btnContent){
		$.ajax({
			type: "POST",
			url: 'maps/fetch',
			data: {
				marker_type: btnContent
			},
			dataType: 'JSON',
			success: function(data){
				console.log(data);
				var ul = document.getElementById('marker-ul');
				ul.innerHTML = "";
				for(var i = 0; i < data.length; i++){
					li = document.createElement('li');
					content = document.createTextNode(
						"Marker Type - " + data[i].marker_type + "\n Title - " + data[i].title + "\nDescription - " + data[i].description + "\n");
					li.appendChild(content);
					ul.appendChild(li);
					window.map.addMarker({
						lat: parseFloat(data[i].lat),
						lng: parseFloat(data[i].lng),
						marker_type: data[i].marker_type,
						icon: "http://google-maps-icons.googlecode.com/files/volleyball.png",
						draggable: true,
						content: "<div class='title'>" + data[i].title + "</div><div class='body'>" + data[i].body  + "</div>"
						});

				}

			},
			error: function(data){
				console.log(data);
			}
		});
	};





$("#submitMarkerData").on("click", function(){
	var doc = document;
	var address = doc.getElementById('form_address').value,
			description = doc.getElementById('form_body').value,
			title = doc.getElementById('form_title').value,
			expiry_date = doc.getElementById('form_expiry_date').value,
			marker_type = doc.getElementById('form_marker_type').value;

	geocoder = new google.maps.Geocoder();
	geocoder.geocode({'address':address}, function(result, status){
		if(status == google.maps.GeocoderStatus.OK){
			var location = result[0].geometry.location;
			var lat = String(location.lat());
			var lng = String(location.lng());
			var dotlat = lat.indexOf(".");
			var dotlng = lng.indexOf(".");
			lat = parseFloat(lat.substring(0, dotlat+7));
			lng = parseFloat(lng.substring(0, dotlng+7));
			$.ajax({                    
			  url: '<%= markers_path %>',     
			  type: 'post', // performing a POST request
			  data : {
			  	address: address,
			  	title: title, 
			  	marker_type: marker_type,
			  	description: description,
			  	lat: lat,
			  	lng: lng,
			  	expiry_date: expiry_date


			    // will be accessible in $_POST['data1']
			  },
			  dataType: 'JSON',                   
			  success: function(data){
			    console.log(data);
			  } 
			});
			
			// alert('lat is ' + lat + " lng is " + lng);
		} else {
			console.log("not successful");
		}
});







</script>